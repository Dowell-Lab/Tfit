/**
 * @file template
 * @author Robin Dowell
 * @brief Unit Testing template
 * @date 2022-01-24
 * 
 */
#include "gmock/gmock.h"

/* Style Guides for Tfit tests:
 *   -- The name of this file should be the *.h file being tested
 *   -- TestSuiteName should be the Class being tested
 *   -- TestName should be Method_functionToBeTested
 *   -- Generally follow Arrange, Act, Assert pattern
 *   -- One (or only a couple) Assert per test
 *   -- No interdependence between tests
 *   -- Do not test getters and setters, but test all methods with any logic/action
 *      (Note a setter has logic if it tests/constrains the input!)
 */

// TEST() {}  is the Test Case macro
// Avoid if statements
TEST(TestSuiteName, TestName)
{
    // Arrange: bring SUT to desired state
    std::string testString;
    testString = "Blanket\tPillow";
    vector<string> answer;

    // Act: call methods on SUT, capture output
    // Most often a single line.
    answer = string_split(testString, '\t');

    // Assert: Verify the outcome
    // Avoid multiple assert sections.
    // ASSERT_* fatal failure, abort current function
    // EXPECT_* nonfatal failure
    // Can stream custom failure messages
    // ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";
    EXPECT_THAT(answer.back(), "Pillow");
    EXPECT_EQ(answer.size(),2);

    // Occasionally a teardown is necessary to cleanup.
}
